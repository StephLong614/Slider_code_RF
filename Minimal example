#Packages
library(foreach)
library("doParallel")
library(manipulate)
no_cores <- detectCores() 
cl<-makeCluster(no_cores,outfile="")
registerDoParallel(cl)
clusterCall(cl, function() library(randomForest))


sim_data<-function(N=1000,pX1=0.5,pX2=0.5,pX3=0.5,pX4=0.5,pY=0.5,alpha1=1,alpha2=1,beta1=1,beta2=1){
  #set.seed(123)
  X1<-rbinom(N,1,pX1)
  X2<-rbinom(N,1,pX2)
  X3<-rbinom(N,1,plogis(pX3/(1-pX3)+X1*alpha1+X2*alpha2))
  X4<-rbinom(N,1,pX4)
  Y<-rbinom(N,1,plogis(pY/(1-pY)+beta1*X1+beta2*X2))
  results<-foreach(i=c(1:6)) %dopar% {
  if(i==1){return(glm(Y~X1+X2,family="binomial")$coef[2:3])}
  if(i==2){return(glm(Y~X1+X2+X3,family="binomial")$coef[2:4])}
  if(i==3){return(glm(Y~X1+X2+X3+X4,family="binomial")$coef[2:5])}
  if(i==4){return(importance(randomForest(Y~X1+X2, importance=T))[,1])}
  if(i==5){return(importance(randomForest(Y~X1+X2+X3, importance=T))[,1])}
  if(i==6){return(importance(randomForest(Y~X1+X2+X3+X4, importance=T))[,1])}
  }

par(mfrow=c(2,3),mar=c(3,5,1,1))
plot(1:2,results[[1]][1:2],ylim=c(-0.5,2),main="LR: X1 X2",ylab="estimated coefficient",cex=4,pch=20,xaxt="n",xlim=c(-0.5,3.5))
points(1:2,c(beta1,beta2),pch=3,col="red",cex=3)

plot(1:3,results[[2]][1:3],ylim=c(-0.5,2),main="LR: X1 X2 X3",ylab="estimated coefficient",cex=4,pch=20,xaxt="n",xlim=c(-0.5,4))
points(1:3,c(beta1,beta2,0),pch=3,col="red",cex=3)

plot(1:4,results[[3]][1:4],ylim=c(-0.5,2),main="LR: X1 X2 X3 X4",ylab="estimated coefficient",cex=4,pch=20,xaxt="n",xlim=c(-0.5,4.5))
points(1:4,c(beta1,beta2,0,0),pch=3,col="red",cex=3)

plot(1:2,results[[4]][1:2],ylim=c(min(c(0,results[[4]][1:2])),max(c(results[[4]][1:2]))),main="RF: X1 X2",ylab="variable importance",cex=4,pch=20,xaxt="n",xlim=c(-0.5,3.5))

plot(1:3,results[[5]][1:3],ylim=c(min(c(0,results[[5]][1:3])),max(c(results[[5]][1:3]))),main="RF: X1 X2 X3",ylab="variable importance",cex=4,pch=20,xaxt="n",xlim=c(-0.5,4))

plot(1:4,results[[6]][1:4],ylim=c(min(c(0,results[[6]][1:4])),max(c(results[[6]][1:4]))),main="RF: X1 X2 X3 X4",ylab="variable importance",cex=4,pch=20,xaxt="n",xlim=c(-0.5,4.5))
return(results)

}

manipulate(sim_data(N=10000,pX1=pX1,pX2=pX2,pX3=pX3,pX4=pX4,pY=pY,alpha1=alpha1,alpha2=alpha1,beta1=beta1,beta2=beta2),
            pX1 = slider(0.01,0.99,0.5,step=0.01),pX2=slider(0.01,0.99,0.5,step=0.01),pX3=slider(0.01,0.99,0.5,step=0.01),
            pX4 = slider(0.01,0.99,0.5,step=0.01), pY = slider(0.01,0.99,0.5,step=0.01), alpha1 = slider(0.01,0.99,0.5,step=0.01), 
            alpha2 = slider(0.01,0.99,0.5,step=0.01), beta1 = slider(0.01,2,0.5,step=0.01), beta2 = slider(0.01,2,0.5,step=0.01), 
            sim_data=button("sim_data"))
